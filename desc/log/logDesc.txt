日志系统有助于建立完善的应用监控体系
    当系统发生线上问题时，完整的现场日志有助于工程师快速定位问题。例如当系统内存溢出时，如果日志系统记录了问题发生现场的堆信息，就可以通过这个曰志分析是什么对象在大量产生并且没有释放内存，回溯系统故障，从而定位问题

日志规范：
    推荐的日志文件命名方式为appName_logType_logName.log
    推荐曰志文件至少保存15天
    避免无效日志打印
    区别对待错误日志
	生产环境禁止输出 DEBUG 曰志且有选择地输出 INFO日志。使用 INFO、WARN 级别来记录业务行为信息时，一定要控制日志输出量，以免磁盘空间不足。同时要为曰志文件设置合理的生命周期及时清理过期的日志。避免重复打印，务必在日志配置文件中设置 additivity=false
	WARN、ERROR 都是与错误有关的日志级别，但不要一发生错误就笼统地输出ERROR 级别日志。 一些业务异常是可以通过引导重试就能恢复正常的，例如用户输入参数错误。在这种情况下，记录日志是为了在用户咨询时可以还原现场，如果输出ERROR 级别就表示一旦出现就需要人为介入，这显然不合理。所以，ERROR只记录系统逻辑错误、异常或者违反重要的业务规则，其他错误都可以归为 WARN级别
   保证记录内容完整
	记录异常时一定要输出异常堆栈，例如 logger.error("xxx" +e.getMessage(),e) 且实例类需重写toString()
   日志框架分类与选择
	日志门面   slf4j :只提供一套接口规范，自身不负责日志功能的实现。目的是让使用者不需要关注底层具体是哪个日志库来负责日志打印及具体的使用细节等
	日志库    	log4j、logback（log4j升级版且本身实现slf4j）
	日志门面/库适配器	

    关于logback.xml与logback-spring.xml的说明
	logback.xml ：是直接就被日志框架加载了。
	logback-spring.xml：配置项不会被日志框架直接加载，而是由 SpringBoot 解析日志配置文件

    在类路径下，存放对应日志框架的自定义配置文件即可；SpringBoot就不会使用它默认的日志配置文件了
	

